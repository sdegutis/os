import type { DrawingContext } from "../core/drawing.js";
import type { Panel } from "../core/panel.js";
import { type Point, type Size } from "../core/types.js";
import { Dynamic } from "../util/dyn.js";
export declare class View extends Dynamic {
    panel: Panel | null;
    parent: View | null;
    children: readonly View[];
    point: Point;
    size: Size;
    canFocus: boolean;
    canMouse: boolean;
    visible: boolean;
    autofocus: boolean;
    hovered: boolean;
    pressed: boolean;
    selected: boolean;
    background: number;
    panelOffset: Point;
    mouse: Point;
    onPanelFocus?(): void;
    onPanelBlur?(): void;
    onMouseDown?(button: number): void;
    onMouseMove?(pos: Point): void;
    onMouseUp?(): void;
    onMouseEnter?(): void;
    onMouseExit?(): void;
    onWheel?(x: number, y: number): void;
    onFocus?(): void;
    onBlur?(): void;
    onKeyDown?(key: string): boolean;
    onKeyUp?(key: string): void;
    adjust?(): void;
    layout?(): void;
    adopted?(parent: View): void;
    presented?(panel: Panel): void;
    init(): void;
    draw(ctx: DrawingContext, px: number, py: number): void;
    protected childResized: () => void;
    protected drawBackground(ctx: DrawingContext, px: number, py: number, bg: number): void;
    focus(): void;
    needsRedraw(): void;
    get firstChild(): View | undefined;
    get lastChild(): View | undefined;
}
