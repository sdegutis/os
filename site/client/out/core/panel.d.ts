import type { View } from "../views/view.js";
import type { Cursor } from "./cursor.js";
import { DrawingContext } from "./drawing.js";
import { Listener } from "./listener.js";
import { type Ref } from "./ref.js";
import { type ClientPanel, type PanelOrdering, type ServerPanel, wRPC } from "./rpc.js";
import type { Point, Size } from "./types.js";
export declare class Panel {
    static all: Map<number, Panel>;
    readonly $point: Ref<Point>;
    get point(): Point;
    set point(s: Point);
    readonly $size: Ref<Size>;
    get size(): Size;
    set size(s: Size);
    readonly $mouse: Ref<Point>;
    get mouse(): Point;
    set mouse(p: Point);
    id: number;
    rpc: wRPC<ClientPanel, ServerPanel>;
    root: View;
    keymap: Set<string>;
    didClose: Listener<void, void>;
    isFocused: boolean;
    readonly ctx: DrawingContext;
    private hoveredTree;
    private hovered;
    private clicking;
    private focused;
    static create(view: JSX.Element, config?: {
        order?: PanelOrdering;
        pos?: Ref<Point> | 'default' | 'center';
    }): Promise<Panel>;
    constructor(keymap: Set<string>, port: MessagePort, id: number, point: Ref<Point>, size: Ref<Size>, root: JSX.Element);
    adoptTree(node: View): void;
    focusPanel(): void;
    focusView(node: View): boolean;
    private sendKeyDown;
    onKeyDown(key: string): void;
    private clearRepeater?;
    onKeyUp(key: string): void;
    private checkUnderMouse;
    private hover;
    redrawRoot(): void;
    private drawTree;
    needsRedraw: () => void;
    needsMouseCheck: () => void;
    private cursors;
    pushCursor(c: Cursor): void;
    popCursor(c: Cursor): void;
    private setCursor;
    blit(): void;
    close(): void;
    isKeyDown(key: string): boolean;
}
export type CursorLock = {
    push(): void;
    pop(): void;
};
